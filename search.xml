<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>正则速查</title>
      <link href="/2022/05/19/%E6%AD%A3%E5%88%99%E9%80%9F%E6%9F%A5/"/>
      <url>/2022/05/19/%E6%AD%A3%E5%88%99%E9%80%9F%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="1、attributes"><a href="#1、attributes" class="headerlink" title="1、attributes"></a>1、attributes</h2><ul><li><code>i</code>：不区分大小写</li><li><code>g</code>：执行全局匹配（当匹配到一个子字符串时，继续匹配下去，直到字符串结尾）</li><li><code>m</code>：执行多行匹配（当字符串中存在\n换行符时，多行匹配的意义就出来了）</li></ul><p><strong>这里对m进行例子解释，另外两个比较简单</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;abc\nda\ndfdabc\nabcd&quot;</span>;</span><br><span class="line"><span class="comment">// 这里匹配两个abc</span></span><br><span class="line"><span class="comment">// 第一行的abc和第三行的abc</span></span><br><span class="line">str1.<span class="title function_">match</span>(<span class="regexp">/abc$/gm</span>); <span class="comment">// [&quot;abc&quot;, &quot;abc&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="2、pattern"><a href="#2、pattern" class="headerlink" title="2、pattern"></a>2、pattern</h2><h3 id="a、元字符"><a href="#a、元字符" class="headerlink" title="a、元字符"></a>a、元字符</h3><p>在pattern中除了普通的字符以外还有元字符（也叫做特殊字符）。</p><ul><li><code>.</code> 查找单个字符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;That&#x27;s hot!&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt1=<span class="regexp">/h.t/g</span>;</span><br><span class="line"><span class="comment">// [&quot;hat&quot;, &quot;hot&quot;]</span></span><br></pre></td></tr></table></figure><ul><li><p><code>\w</code> 查找单词符号 包括：a-z，A-Z，0-9，以及下划线</p></li><li><p><code>\W</code> 查找非单词符号</p></li><li><p><code>\d</code> 查找数字</p></li><li><p><code>\D</code> 查找非数字字符</p></li><li><p><code>\s</code> 查找空白字符 </p><ul><li>空格符 (space character)</li><li>制表符 (tab character)</li><li>回车符 (carriage return character)</li><li>换行符 (new line character)</li><li>垂直换行符 (vertical tab character)</li><li>换页符 (form feed character)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// str中包括一个空格符，一个换行符，一个制表符tab</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abc abc\n&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\s/g</span>;</span><br><span class="line"><span class="comment">// 制表符为四个空格符</span></span><br><span class="line"><span class="comment">// [&quot; &quot;, &quot;↵&quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;]</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>\S</code> 查找非空白字符</p></li><li><p><code>\b</code> 元字符匹配单词边界</p><ul><li>单词就是以空格隔开的字符串<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;Visit W3School&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt1=<span class="regexp">/\bW3/g</span>;</span><br><span class="line"><span class="comment">// [&quot;W3&quot;]</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>\B</code> 匹配非单词边界</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;Visit W3School&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt1=<span class="regexp">/\BW3/g</span>; <span class="comment">// null</span></span><br><span class="line"><span class="keyword">var</span> patt2=<span class="regexp">/\BSchool/g</span>; <span class="comment">// School</span></span><br></pre></td></tr></table></figure><ul><li><p><code>\n</code> 查找换行符</p></li><li><p><code>\r</code> 查找回车符</p></li><li><p><code>\t</code> 查找制表符</p></li></ul><h3 id="b、量词"><a href="#b、量词" class="headerlink" title="b、量词"></a>b、量词</h3><ul><li><p><code>n+</code> 匹配任何包括至少1个n的字符串</p></li><li><p><code>n*</code> 匹配任何包括0个或多个n的字符串</p></li><li><p><code>n?</code> 匹配任何包括0个或者1个的字符串</p></li><li><p><code>n&#123;X&#125;</code> 匹配包含X个n的序列的字符串</p></li><li><p><code>n&#123;X,Y&#125;</code> 匹配包含X-Y个n的序列的字符串</p></li><li><p><code>n&#123;X,&#125;</code> 匹配包含至少X个n的序列的字符串</p></li><li><p><code>n$</code> 匹配任何结尾是n的序列的字符串</p></li><li><p><code>^n</code> 匹配任何开头是n的序列的字符串</p></li><li><p><code>?=n</code> 匹配任何其后紧跟n的序列的字符串</p></li><li><p><code>?&lt;n</code> 匹配任何其前紧跟n的序列的字符串</p><ul><li>注意：没有<code>?&gt;n</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;Is this all there is&quot;</span>;</span><br><span class="line"><span class="comment">// 匹配is后紧跟 all的字符串</span></span><br><span class="line"><span class="keyword">var</span> patt1=<span class="regexp">/is(?= all)/g</span>; <span class="comment">// [&quot;is&quot;] this中的is</span></span><br><span class="line"><span class="comment">// 匹配is前紧跟th的字符串</span></span><br><span class="line"><span class="keyword">var</span> patt2=<span class="regexp">/(?&lt;=th)is/g</span>; <span class="comment">// [&quot;is&quot;] this中的is</span></span><br></pre></td></tr></table></figure><ul><li><code>?!n</code> 匹配任何其后不紧跟n的序列的字符串</li></ul><h2 id="3、描述字符范围"><a href="#3、描述字符范围" class="headerlink" title="3、描述字符范围"></a>3、描述字符范围</h2><ul><li><code>[abc]</code>：查找方括号内任意一个字符。</li><li><code>[^abc]</code>：查找不在方括号内的字符。</li><li><code>[0-9]</code>：查找从 0 至 9 范围内的数字，即查找数字。</li><li><code>[a-z]</code>：查找从小写 a 到小写 z 范围内的字符，即查找小写字母。</li><li><code>[A-Z]</code>：查找从大写 A 到大写 Z 范围内的字符，即查找大写字母。</li><li><code>[A-z]</code>：查找从大写 A 到小写 z 范围内的字符，即所有大小写的字母。</li></ul><h2 id="4、RegExp"><a href="#4、RegExp" class="headerlink" title="4、RegExp"></a>4、RegExp</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg1 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;i&quot;</span>); <span class="comment">// /aa/i</span></span><br><span class="line">reg1.<span class="title function_">test</span>(<span class="string">&quot;aa&quot;</span>); <span class="comment">// true</span></span><br><span class="line">reg1.<span class="title function_">test</span>(<span class="string">&quot;aA&quot;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// attributes参数会覆盖掉正则的attributes</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/aa/im</span>,<span class="string">&quot;g&quot;</span>); <span class="comment">// /aa/g</span></span><br></pre></td></tr></table></figure><h2 id="5、对象属性"><a href="#5、对象属性" class="headerlink" title="5、对象属性"></a>5、对象属性</h2><h3 id="1、lastIndex"><a href="#1、lastIndex" class="headerlink" title="1、lastIndex"></a>1、<code>lastIndex</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;abc abc abc sdf abc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/bc/g</span>; <span class="comment">// 如果没有全局匹配，lastIndex永远是0，毫无意义</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;下次匹配的起始位置：&quot;</span>, patt1.<span class="property">lastIndex</span>);</span><br><span class="line">  patt1.<span class="title function_">test</span>(str2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当匹配到字符串尾部时，将重新开始从起始位置0开始匹配。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">下次匹配的起始位置： 0</span></span><br><span class="line"><span class="comment">下次匹配的起始位置： 3</span></span><br><span class="line"><span class="comment">下次匹配的起始位置： 7</span></span><br><span class="line"><span class="comment">下次匹配的起始位置： 11</span></span><br><span class="line"><span class="comment">下次匹配的起始位置： 19</span></span><br><span class="line"><span class="comment">下次匹配的起始位置： 0</span></span><br><span class="line"><span class="comment">下次匹配的起始位置： 3</span></span><br><span class="line"><span class="comment">下次匹配的起始位置： 7</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="6、正则对象方法"><a href="#6、正则对象方法" class="headerlink" title="6、正则对象方法"></a>6、正则对象方法</h2><ul><li><p><code>exec</code>检索字符串中指定的值，返回找到的值，并确认位置。</p></li><li><p><code>test</code>检索字符串中指定的值，返回true&#x2F;false。</p></li></ul><h2 id="7、支持正则的String对象的方法"><a href="#7、支持正则的String对象的方法" class="headerlink" title="7、支持正则的String对象的方法"></a>7、支持正则的String对象的方法</h2><ul><li><p><code>search</code> 检索与正则表达式相匹配的值。返回值：第一个与 regexp 相匹配的子串的起始位置。</p></li><li><p><code>match</code> 找到一个或多个正则表达式的匹配。</p></li><li><p><code>replace</code> 替换与正则表达式匹配的子串。</p><p>  replace中第二个参数为函数时的作用：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abc abg asdf daf abfff&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">str.<span class="title function_">replace</span>(<span class="regexp">/ab/g</span>, <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">// ab ab ab</span></span><br><span class="line">    <span class="keyword">return</span> item + <span class="string">&quot;后缀&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// ab后缀c ab后缀g asdf daf ab后缀fff</span></span><br></pre></td></tr></table></figure><p>  replace中第二个参数中的$n的用处（n为正整数）</p><blockquote><p>$1表示第一个分组（即第一个小括号里小正则捕获的内容）</p><p>$2表示第二个分组（即第二个小括号里小正则捕获的内容）</p><p>…</p></blockquote>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;http://123.com&quot;</span>;</span><br><span class="line"><span class="comment">// 这里正则只有一个小括号，所以只用到了$1</span></span><br><span class="line"><span class="comment">// 必须要有小括号才能使用$1</span></span><br><span class="line">str.<span class="title function_">replace</span>(<span class="regexp">/(http:\/\/\S+)/g</span>,<span class="string">&#x27;&lt;a href=&quot;$1&quot;&gt;$1&lt;/a&gt;&#x27;</span>)</span><br><span class="line"><span class="comment">// &lt;a href=&quot;http://123.com&quot;&gt;http://123.com&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;127|1, 126|2&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/(\d+)\|(\d+)/g</span>, <span class="string">&#x27;&lt;img alt=&quot;$2&quot; src=&quot;$1.gif&quot;&gt;&#x27;</span>)</span><br><span class="line"><span class="comment">// &lt;img alt=&quot;1&quot; src=&quot;127.gif&quot;&gt;, &lt;img alt=&quot;2&quot; src=&quot;126.gif&quot;&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>split</code> 把字符串分割为字符串数组。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2022/05/19/test/"/>
      <url>/2022/05/19/test/</url>
      
        <content type="html"><![CDATA[<h2 id="测试文章"><a href="#测试文章" class="headerlink" title="测试文章"></a>测试文章</h2>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/19/hello-world/"/>
      <url>/2022/05/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
