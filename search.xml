<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>canvas-perspective</title>
      <link href="/2022/05/22/canvas-perspective/"/>
      <url>/2022/05/22/canvas-perspective/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>因为最近看到很多canvas的骚操作，有画龙的、有做动画的，在看他们代码的时候，这些图形处理的方式让我突然想到在大二用python做的一个隐形斗篷的骚操作，于是二话不说就打开github创建了项目，一顿骚操作下，效果终于出来了！！！</p><h2 id="动画演示"><a href="#动画演示" class="headerlink" title="动画演示"></a>动画演示</h2><p><img src="/images/canvas.gif" alt="动画演示"></p><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="1、先看html里面有什么"><a href="#1、先看html里面有什么" class="headerlink" title="1、先看html里面有什么"></a>1、先看html里面有什么</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video-red&quot;</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">&quot;350&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas-perspective&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><p>video用来播放原视频</p><p>canvas用来快速绘画（视觉效果约等于播放）原视频画面</p><h3 id="2、再看js中的核心代码"><a href="#2、再看js中的核心代码" class="headerlink" title="2、再看js中的核心代码"></a>2、再看js中的核心代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; rgbaConvertToHex &#125; <span class="keyword">from</span> <span class="string">&quot;./utils/index&quot;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CanvasPerspective</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">canvasEle, videoEle, colorScope</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">videoEle</span> = videoEle;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">canvasEle</span> = canvasEle;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">colorScope</span> = colorScope || <span class="string">&quot;red&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span> = <span class="variable language_">this</span>.<span class="property">canvasEle</span>.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">playing</span> = <span class="literal">false</span>; </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gap</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">backgroundImageData</span> = <span class="literal">null</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听video的状态</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">videoEle</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;play&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;play&quot;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">playing</span> = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 当video处于播放时去实时绘制当前视频画面</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">drawVideo</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">videoEle</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;pause&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">playing</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">changeColor</span>(<span class="params">color</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">colorScope</span> = color;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(color);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">destroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">playing</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">backgroundImageData</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">canvasEle</span>.<span class="property">width</span>, <span class="variable language_">this</span>.<span class="property">canvasEle</span>.<span class="property">width</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">drawVideo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">drawImage</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">videoEle</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">canvasEle</span>.<span class="property">width</span>,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">canvasEle</span>.<span class="property">height</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">const</span> imageData = <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">getImageData</span>(</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">canvasEle</span>.<span class="property">width</span>,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">canvasEle</span>.<span class="property">height</span></span><br><span class="line">    ).<span class="property">data</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">backgroundImageData</span> &amp;&amp; imageData[<span class="number">3</span>] !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">backgroundImageData</span> = imageData;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">canvasEle</span>.<span class="property">height</span>; i += <span class="variable language_">this</span>.<span class="property">gap</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="variable language_">this</span>.<span class="property">canvasEle</span>.<span class="property">width</span>; j += <span class="variable language_">this</span>.<span class="property">gap</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> pos = (i * <span class="variable language_">this</span>.<span class="property">canvasEle</span>.<span class="property">width</span> + j) * <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">const</span> red = imageData[pos];</span><br><span class="line">        <span class="keyword">const</span> green = imageData[pos + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">const</span> blue = imageData[pos + <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">colorScope</span> === <span class="string">&quot;red&quot;</span>) &#123;</span><br><span class="line">          flag = red &gt; <span class="number">70</span> &amp;&amp; green &lt; <span class="number">60</span> &amp;&amp; blue &lt; <span class="number">60</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">colorScope</span> === <span class="string">&quot;green&quot;</span>) &#123;</span><br><span class="line">          flag = green &gt; <span class="number">100</span> &amp;&amp; green &gt; red + blue;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">colorScope</span> === <span class="string">&quot;blue&quot;</span>) &#123;</span><br><span class="line">          flag = blue &gt; <span class="number">100</span> &amp;&amp; blue &gt; red + green;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">          <span class="keyword">const</span> [r, g, b, a] = <span class="variable language_">this</span>.<span class="property">backgroundImageData</span>.<span class="title function_">slice</span>(pos, pos + <span class="number">4</span>);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">fillStyle</span> = <span class="title function_">rgbaConvertToHex</span>(r, g, b, a);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">fillRect</span>(j, i, <span class="variable language_">this</span>.<span class="property">gap</span>, <span class="variable language_">this</span>.<span class="property">gap</span>);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">beginPath</span>();</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">arc</span>(j, i, <span class="variable language_">this</span>.<span class="property">gap</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">closePath</span>();</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">fill</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">playing</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(<span class="variable language_">this</span>.<span class="property">drawVideo</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>CanvasPerspective类</code></p><ul><li>videoEle （保存video对象）</li><li>canvasEle（保存canvas对象）</li><li>colorScope（目标区域的颜色，默认是红色）</li><li>context（canvas的绘画话柄）</li><li>playing（video的播放状态）</li><li>gap（扫描像素点的step）</li><li><strong>backgroundImageData（</strong><code>原视频第一帧的背景图数据</code>）</li></ul><p><code>drawVideo方法</code></p><ol><li><p>将video当前画面绘画到canvas上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">drawImage</span>(</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">videoEle</span>,</span><br><span class="line">   <span class="number">0</span>,</span><br><span class="line">   <span class="number">0</span>,</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">canvasEle</span>.<span class="property">width</span>,</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">canvasEle</span>.<span class="property">height</span></span><br><span class="line"> );</span><br></pre></td></tr></table></figure></li><li><p>获取canvas图像数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> imageData = <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">getImageData</span>(</span><br><span class="line">  <span class="number">0</span>,</span><br><span class="line">  <span class="number">0</span>,</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">canvasEle</span>.<span class="property">width</span>,</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">canvasEle</span>.<span class="property">height</span></span><br><span class="line">).<span class="property">data</span>;</span><br></pre></td></tr></table></figure></li><li><p>保存第一帧（背景图）的图像数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">backgroundImageData</span> &amp;&amp; imageData[<span class="number">3</span>] !== <span class="number">0</span>) &#123;</span><br><span class="line">   <span class="comment">// 保存第一帧（背景图）的像素数据</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">backgroundImageData</span> = imageData;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>imageData[ 3 ] !&#x3D;&#x3D; 0 是在使用iphone safari时发现了一个bug，backgroundImageData的数据为[0, 0, 0, 0, …..],即一个<code>黑色全透明的背景</code>。</li><li>所以这里判断一下，当第一个像素点的透明度不为0时才认为是原视频的背景（关于imageData数据的解释和运用在后面）</li></ul></li><li><p>扫描canvas的像素点，拿到扫描到像素点的颜色值（[red, green, blue, alpha]）,判断当前像素点是否是目标颜色，如果是目标颜色就拿<code>之前保存的背景图中这个像素点的颜色值</code>去覆盖掉自己。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从左向右，从上到下去扫描canvas图像</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">canvasEle</span>.<span class="property">height</span>; i += <span class="variable language_">this</span>.<span class="property">gap</span>) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="variable language_">this</span>.<span class="property">canvasEle</span>.<span class="property">width</span>; j += <span class="variable language_">this</span>.<span class="property">gap</span>) &#123;</span><br><span class="line">     <span class="comment">/* </span></span><br><span class="line"><span class="comment">     （i * this.canvasEle.width + j）表示当前遍历到的像素点的index，由于一个像素点在imageData中是以4位数字来表示的（red、green、blue、alpha），所以需要乘以四来得到这个像素点在imageData中的起始位置</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="comment">/* 例：第三个像素点，i=0，j=2，所以在imageData中的位置是(0*width+2) * 4 = 8</span></span><br><span class="line"><span class="comment">     红：imageData[8]</span></span><br><span class="line"><span class="comment">     绿：imageData[9]</span></span><br><span class="line"><span class="comment">     蓝：imageData[10]</span></span><br><span class="line"><span class="comment">     透明度：imageData[11]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="keyword">const</span> pos = (i * <span class="variable language_">this</span>.<span class="property">canvasEle</span>.<span class="property">width</span> + j) * <span class="number">4</span>;</span><br><span class="line">     <span class="comment">/* </span></span><br><span class="line"><span class="comment">     R - 红色（从0到255）</span></span><br><span class="line"><span class="comment">     G - 绿色（从0到255）</span></span><br><span class="line"><span class="comment">     B - 蓝色（从0到255）</span></span><br><span class="line"><span class="comment">     A - Alpha通道（从0到255; 0是透明的，255是完全可见）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="keyword">const</span> red = imageData[pos];</span><br><span class="line">     <span class="keyword">const</span> green = imageData[pos + <span class="number">1</span>];</span><br><span class="line">     <span class="keyword">const</span> blue = imageData[pos + <span class="number">2</span>];</span><br><span class="line">     <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">     <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">colorScope</span> === <span class="string">&quot;red&quot;</span>) &#123;</span><br><span class="line">       flag = red &gt; <span class="number">70</span> &amp;&amp; green &lt; <span class="number">60</span> &amp;&amp; blue &lt; <span class="number">60</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">colorScope</span> === <span class="string">&quot;green&quot;</span>) &#123;</span><br><span class="line">       flag = green &gt; <span class="number">100</span> &amp;&amp; green &gt; red + blue;</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">colorScope</span> === <span class="string">&quot;blue&quot;</span>) &#123;</span><br><span class="line">       flag = blue &gt; <span class="number">100</span> &amp;&amp; blue &gt; red + green;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">       <span class="keyword">const</span> [r, g, b, a] = <span class="variable language_">this</span>.<span class="property">backgroundImageData</span>.<span class="title function_">slice</span>(pos, pos + <span class="number">4</span>);</span><br><span class="line">       <span class="comment">// 目标区域填充为背景色</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">fillStyle</span> = <span class="title function_">rgbaConvertToHex</span>(r, g, b, a);</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">fillRect</span>(j, i, <span class="variable language_">this</span>.<span class="property">gap</span>, <span class="variable language_">this</span>.<span class="property">gap</span>);</span><br><span class="line">       <span class="comment">// 图像边缘钝化</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">beginPath</span>();</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">arc</span>(j, i, <span class="variable language_">this</span>.<span class="property">gap</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>);</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">closePath</span>();</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">context</span>.<span class="title function_">fill</span>();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>利用window.requestAnimationFrame来执行动画</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">playing</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(<span class="variable language_">this</span>.<span class="property">drawVideo</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br></pre></td></tr></table></figure><h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><p>1.由于需要扫描整个图像的数据，一般都是几万个数据的数组，所以性能还有待提升。</p></li></ol><p>2.对于红绿蓝颜色区域的判断不是非常准确，因为实际拍摄的画面有很多影响因素，导致并不能达到标准rgba值。</p><p>3.对视频内容有严格要求（当然这是这种设计方案必然会产生的问题）</p><ol><li>必须要保持背景不动</li><li>在视频前面几帧，只能展示背景，不能有其他干扰项</li></ol><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><blockquote><p>⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐</p></blockquote><p><a href="https://github.com/Himangguo/canvas-perspective">https://github.com/Himangguo/canvas-perspective</a></p><p>你的选择是（）</p><p>a. 太酷了，点个star！</p><p>b. 正是我想要的，给你个star！</p><p>c. 下次一定！</p><p>d. 下次丕定</p><p>e. 钝角</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://juejin.cn/post/6963476650356916254">https://juejin.cn/post/6963476650356916254</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-最长上升子序列</title>
      <link href="/2022/05/20/leetcode-%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>/2022/05/20/leetcode-%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="先看代码"><a href="#先看代码" class="headerlink" title="先看代码"></a>先看代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lengthOfLIS = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="comment">// dp[i]表示必须考虑nums[i]的最长上升子序列，即nums[i]必须在子序列的末尾</span></span><br><span class="line">    <span class="keyword">const</span> dp = <span class="keyword">new</span> <span class="title class_">Array</span>(nums.<span class="property">length</span>);</span><br><span class="line">    <span class="comment">// 只考虑nums[0]的最长上升子序列当然是本身</span></span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i&lt;dp.<span class="property">length</span>;i++) &#123;</span><br><span class="line">        <span class="comment">// dp[i]最小值为1（仅考虑自己）</span></span><br><span class="line">        dp[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 在[0,i)之间查找小于nums[i]的值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span> ;j&lt;i;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j]&lt;nums[i]) &#123;</span><br><span class="line">                <span class="comment">// nums[i]可以和j的子序列合并</span></span><br><span class="line">                dp[i] = <span class="title class_">Math</span>.<span class="title function_">max</span>(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        max = <span class="title class_">Math</span>.<span class="title function_">max</span>(max, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="再看步骤图"><a href="#再看步骤图" class="headerlink" title="再看步骤图"></a>再看步骤图</h3><p><img src="/images/leetcode300.png" alt="动态规划思路"></p><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>时间复杂度O（$n^2$）<br>空间复杂度O(n)</p><h2 id="贪心-二分查找"><a href="#贪心-二分查找" class="headerlink" title="贪心+二分查找"></a>贪心+二分查找</h2><h3 id="先看代码-1"><a href="#先看代码-1" class="headerlink" title="先看代码"></a>先看代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> monotStack = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;nums.<span class="property">length</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(monotStack.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">             monotStack.<span class="title function_">push</span>(nums[i]);</span><br><span class="line">             <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(monotStack[monotStack.<span class="property">length</span>-<span class="number">1</span>]&lt;nums[i]) &#123;</span><br><span class="line">            monotStack.<span class="title function_">push</span>(nums[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(monotStack[monotStack.<span class="property">length</span>-<span class="number">1</span>]&gt;nums[i]) &#123;</span><br><span class="line">            <span class="comment">// 利用单调栈的性质使用二分法查找第一个比nums[i]小的数</span></span><br><span class="line">            <span class="keyword">let</span> l = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">let</span> r = monotStack.<span class="property">length</span>-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r) &#123;</span><br><span class="line">                <span class="keyword">const</span> mid = l+r+<span class="number">1</span>&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(monotStack[mid]&gt;=nums[i]) &#123;</span><br><span class="line">                    r = mid-<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    l = mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&lt;=monotStack[<span class="number">0</span>]) &#123;</span><br><span class="line">                     <span class="comment">// 如果nums[i]小于或等于单调栈中所有数</span></span><br><span class="line">                    monotStack[<span class="number">0</span>] = nums[i];</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    monotStack[<span class="number">1</span>] = nums[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                monotStack[l+<span class="number">1</span>] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> monotStack.<span class="property">length</span>;</span><br></pre></td></tr></table></figure><h3 id="再看步骤图-1"><a href="#再看步骤图-1" class="headerlink" title="再看步骤图"></a>再看步骤图</h3><p><img src="/images/leetcode300-2.png" alt="动态规划思路"></p><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><p>时间复杂度O（$nlogn$）<br>空间复杂度O(n)</p><h3 id="疑惑场景"><a href="#疑惑场景" class="headerlink" title="疑惑场景"></a>疑惑场景</h3><p>老员工：</p><p>以输入序列 [0, 8, 4, 12, 2] 为例：</p><ol><li><p>第一步插入 0，d &#x3D; [ 0 ]；</p></li><li><p>第二步插入 8，d &#x3D; [0, 8]；</p></li><li><p>第三步插入 4，d &#x3D; [0, 4]；</p></li><li><p>第四步插入 12，d &#x3D; [0, 4, 12]；</p></li><li><p>第五步插入 2，d &#x3D; [0, 2, 12]。（看到没，[0, 2, 12]又不是nums的子序列，你这算法有问题啊）</p></li></ol><p>老板：</p><ol><li>首先咱们看结果，结果是最长上升序列的长度还是3，而且从长远的角度考虑，第五步插入的新员工（2）的潜力比老员工（4）更大</li><li>给你一个栗子把<ul><li>如果上面的例子是这样的[0, 8, 4, 12, 2, 3, 5]</li><li>第六步插入 3，d &#x3D; [0, 2, 3]</li><li>第七步插入 4，d &#x3D; [0, 2, 3, 5]</li></ul></li><li>看懂了吗，你知道怎么做了吗</li></ol><p>老员工：我知道了，润！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则速查</title>
      <link href="/2022/05/19/%E6%AD%A3%E5%88%99%E9%80%9F%E6%9F%A5/"/>
      <url>/2022/05/19/%E6%AD%A3%E5%88%99%E9%80%9F%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="1、attributes"><a href="#1、attributes" class="headerlink" title="1、attributes"></a>1、attributes</h2><ul><li><code>i</code>：不区分大小写</li><li><code>g</code>：执行全局匹配（当匹配到一个子字符串时，继续匹配下去，直到字符串结尾）</li><li><code>m</code>：执行多行匹配（当字符串中存在\n换行符时，多行匹配的意义就出来了）</li></ul><p><strong>这里对m进行例子解释，另外两个比较简单</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;abc\nda\ndfdabc\nabcd&quot;</span>;</span><br><span class="line"><span class="comment">// 这里匹配两个abc</span></span><br><span class="line"><span class="comment">// 第一行的abc和第三行的abc</span></span><br><span class="line">str1.<span class="title function_">match</span>(<span class="regexp">/abc$/gm</span>); <span class="comment">// [&quot;abc&quot;, &quot;abc&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="2、pattern"><a href="#2、pattern" class="headerlink" title="2、pattern"></a>2、pattern</h2><h3 id="a、元字符"><a href="#a、元字符" class="headerlink" title="a、元字符"></a>a、元字符</h3><p>在pattern中除了普通的字符以外还有元字符（也叫做特殊字符）。</p><ul><li><code>.</code> 查找单个字符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;That&#x27;s hot!&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt1=<span class="regexp">/h.t/g</span>;</span><br><span class="line"><span class="comment">// [&quot;hat&quot;, &quot;hot&quot;]</span></span><br></pre></td></tr></table></figure><ul><li><p><code>\w</code> 查找单词符号 包括：a-z，A-Z，0-9，以及下划线</p></li><li><p><code>\W</code> 查找非单词符号</p></li><li><p><code>\d</code> 查找数字</p></li><li><p><code>\D</code> 查找非数字字符</p></li><li><p><code>\s</code> 查找空白字符 </p><ul><li>空格符 (space character)</li><li>制表符 (tab character)</li><li>回车符 (carriage return character)</li><li>换行符 (new line character)</li><li>垂直换行符 (vertical tab character)</li><li>换页符 (form feed character)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// str中包括一个空格符，一个换行符，一个制表符tab</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abc abc\n&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\s/g</span>;</span><br><span class="line"><span class="comment">// 制表符为四个空格符</span></span><br><span class="line"><span class="comment">// [&quot; &quot;, &quot;↵&quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;]</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>\S</code> 查找非空白字符</p></li><li><p><code>\b</code> 元字符匹配单词边界</p><ul><li>单词就是以空格隔开的字符串<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;Visit W3School&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt1=<span class="regexp">/\bW3/g</span>;</span><br><span class="line"><span class="comment">// [&quot;W3&quot;]</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>\B</code> 匹配非单词边界</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;Visit W3School&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt1=<span class="regexp">/\BW3/g</span>; <span class="comment">// null</span></span><br><span class="line"><span class="keyword">var</span> patt2=<span class="regexp">/\BSchool/g</span>; <span class="comment">// School</span></span><br></pre></td></tr></table></figure><ul><li><p><code>\n</code> 查找换行符</p></li><li><p><code>\r</code> 查找回车符</p></li><li><p><code>\t</code> 查找制表符</p></li></ul><h3 id="b、量词"><a href="#b、量词" class="headerlink" title="b、量词"></a>b、量词</h3><ul><li><p><code>n+</code> 匹配任何包括至少1个n的字符串</p></li><li><p><code>n*</code> 匹配任何包括0个或多个n的字符串</p></li><li><p><code>n?</code> 匹配任何包括0个或者1个的字符串</p></li><li><p><code>n&#123;X&#125;</code> 匹配包含X个n的序列的字符串</p></li><li><p><code>n&#123;X,Y&#125;</code> 匹配包含X-Y个n的序列的字符串</p></li><li><p><code>n&#123;X,&#125;</code> 匹配包含至少X个n的序列的字符串</p></li><li><p><code>n$</code> 匹配任何结尾是n的序列的字符串</p></li><li><p><code>^n</code> 匹配任何开头是n的序列的字符串</p></li><li><p><code>?=n</code> 匹配任何其后紧跟n的序列的字符串</p></li><li><p><code>?&lt;n</code> 匹配任何其前紧跟n的序列的字符串</p><ul><li>注意：没有<code>?&gt;n</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;Is this all there is&quot;</span>;</span><br><span class="line"><span class="comment">// 匹配is后紧跟 all的字符串</span></span><br><span class="line"><span class="keyword">var</span> patt1=<span class="regexp">/is(?= all)/g</span>; <span class="comment">// [&quot;is&quot;] this中的is</span></span><br><span class="line"><span class="comment">// 匹配is前紧跟th的字符串</span></span><br><span class="line"><span class="keyword">var</span> patt2=<span class="regexp">/(?&lt;=th)is/g</span>; <span class="comment">// [&quot;is&quot;] this中的is</span></span><br></pre></td></tr></table></figure><ul><li><code>?!n</code> 匹配任何其后不紧跟n的序列的字符串</li></ul><h2 id="3、描述字符范围"><a href="#3、描述字符范围" class="headerlink" title="3、描述字符范围"></a>3、描述字符范围</h2><ul><li><code>[abc]</code>：查找方括号内任意一个字符。</li><li><code>[^abc]</code>：查找不在方括号内的字符。</li><li><code>[0-9]</code>：查找从 0 至 9 范围内的数字，即查找数字。</li><li><code>[a-z]</code>：查找从小写 a 到小写 z 范围内的字符，即查找小写字母。</li><li><code>[A-Z]</code>：查找从大写 A 到大写 Z 范围内的字符，即查找大写字母。</li><li><code>[A-z]</code>：查找从大写 A 到小写 z 范围内的字符，即所有大小写的字母。</li></ul><h2 id="4、RegExp"><a href="#4、RegExp" class="headerlink" title="4、RegExp"></a>4、RegExp</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg1 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;i&quot;</span>); <span class="comment">// /aa/i</span></span><br><span class="line">reg1.<span class="title function_">test</span>(<span class="string">&quot;aa&quot;</span>); <span class="comment">// true</span></span><br><span class="line">reg1.<span class="title function_">test</span>(<span class="string">&quot;aA&quot;</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// attributes参数会覆盖掉正则的attributes</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/aa/im</span>,<span class="string">&quot;g&quot;</span>); <span class="comment">// /aa/g</span></span><br></pre></td></tr></table></figure><h2 id="5、对象属性"><a href="#5、对象属性" class="headerlink" title="5、对象属性"></a>5、对象属性</h2><h3 id="1、lastIndex"><a href="#1、lastIndex" class="headerlink" title="1、lastIndex"></a>1、<code>lastIndex</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;abc abc abc sdf abc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> patt1 = <span class="regexp">/bc/g</span>; <span class="comment">// 如果没有全局匹配，lastIndex永远是0，毫无意义</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;下次匹配的起始位置：&quot;</span>, patt1.<span class="property">lastIndex</span>);</span><br><span class="line">  patt1.<span class="title function_">test</span>(str2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当匹配到字符串尾部时，将重新开始从起始位置0开始匹配。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">下次匹配的起始位置： 0</span></span><br><span class="line"><span class="comment">下次匹配的起始位置： 3</span></span><br><span class="line"><span class="comment">下次匹配的起始位置： 7</span></span><br><span class="line"><span class="comment">下次匹配的起始位置： 11</span></span><br><span class="line"><span class="comment">下次匹配的起始位置： 19</span></span><br><span class="line"><span class="comment">下次匹配的起始位置： 0</span></span><br><span class="line"><span class="comment">下次匹配的起始位置： 3</span></span><br><span class="line"><span class="comment">下次匹配的起始位置： 7</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="6、正则对象方法"><a href="#6、正则对象方法" class="headerlink" title="6、正则对象方法"></a>6、正则对象方法</h2><ul><li><p><code>exec</code>检索字符串中指定的值，返回找到的值，并确认位置。</p></li><li><p><code>test</code>检索字符串中指定的值，返回true&#x2F;false。</p></li></ul><h2 id="7、支持正则的String对象的方法"><a href="#7、支持正则的String对象的方法" class="headerlink" title="7、支持正则的String对象的方法"></a>7、支持正则的String对象的方法</h2><ul><li><p><code>search</code> 检索与正则表达式相匹配的值。返回值：第一个与 regexp 相匹配的子串的起始位置。</p></li><li><p><code>match</code> 找到一个或多个正则表达式的匹配。</p></li><li><p><code>replace</code> 替换与正则表达式匹配的子串。</p><p>  replace中第二个参数为函数时的作用：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abc abg asdf daf abfff&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">str.<span class="title function_">replace</span>(<span class="regexp">/ab/g</span>, <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">// ab ab ab</span></span><br><span class="line">    <span class="keyword">return</span> item + <span class="string">&quot;后缀&quot;</span>;</span><br><span class="line">&#125;)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// ab后缀c ab后缀g asdf daf ab后缀fff</span></span><br></pre></td></tr></table></figure><p>  replace中第二个参数中的$n的用处（n为正整数）</p><blockquote><p>$1表示第一个分组（即第一个小括号里小正则捕获的内容）</p><p>$2表示第二个分组（即第二个小括号里小正则捕获的内容）</p><p>…</p></blockquote>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;http://123.com&quot;</span>;</span><br><span class="line"><span class="comment">// 这里正则只有一个小括号，所以只用到了$1</span></span><br><span class="line"><span class="comment">// 必须要有小括号才能使用$1</span></span><br><span class="line">str.<span class="title function_">replace</span>(<span class="regexp">/(http:\/\/\S+)/g</span>,<span class="string">&#x27;&lt;a href=&quot;$1&quot;&gt;$1&lt;/a&gt;&#x27;</span>)</span><br><span class="line"><span class="comment">// &lt;a href=&quot;http://123.com&quot;&gt;http://123.com&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;127|1, 126|2&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/(\d+)\|(\d+)/g</span>, <span class="string">&#x27;&lt;img alt=&quot;$2&quot; src=&quot;$1.gif&quot;&gt;&#x27;</span>)</span><br><span class="line"><span class="comment">// &lt;img alt=&quot;1&quot; src=&quot;127.gif&quot;&gt;, &lt;img alt=&quot;2&quot; src=&quot;126.gif&quot;&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>split</code> 把字符串分割为字符串数组。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
